# Programmation réactive
Problématique: gestion du temps de réponse.
Le navigateur ne met à diposition qu'un Thread à la fois et il faut pour l'utilisateur ne pas attendre que le serveur réponde.

# Promise
Le principe est le suivant:
- j'ai un traitement dans un coin ; il vit sa vie et me rappelle quand le traitement est terminé.
- mécanisme de requête / réponse avec un traitement long potentiel ==> Je prévois ce qui se passe et derrière je réponds.

# Observable
Un observable est un canal de communication ; comme si j'allumais la radio, des nouvelles tombent et on s'abonne à un mot clé.
Mécanisme d'écoute / évenementiel : se mettre à l'écoute d'un click ou interaction avec l'utilisateur ; 
Quand le serveur / utilisateur a quelque chose à me dire, j'effectue un traitement.
Le canal est ouvert le temps que le serveur réponde.

# Module
import {Observable} from 'rxjs/Observable'

# Composant et observable
Le composant consomme l'observale.
Fonction qui remonte un observable
fonction rehercherFilms(titre:String): Observable<Array<Film>> { ... }
On est bien sur un mécanisme asynchrone, je ne renvoie pas la valeur directement mais un observable qui est 
capable de fournir un Array<Film> ou une erreur à la fin du traitement.
subscribe: Le composant se met à l'écoute du cancal de communication / observable et réagir quand il répond.
S'inscire au canal ; qd une valeur est ajoutée au canal add ou erreur ou autre, je vais être capable de la traiter.

Exemple:
this.rechercherFilms(this.recherche).subscribe(
  value => this.films = value,
  error => this.erreur = error,
  () => this.loading = false // ==> taitement terminé.
)


# Observer
sert à expliquer ce qui se passe dans le canal de communication?
return new Obervable(observer => { ... });
complete : je ferme le canal de communication ; j'ai dit tout ce que j'avais à dire.
add : ajouter des chose dans le canal.
next: info est disponible, je peux la ventiler aux abonnés.
error: définir une erreur
remove: enlever qqchose du canal

On peut s'en servir comme buffer, file, evènement ou ventiler une seul info...
